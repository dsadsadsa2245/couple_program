"""PostgreSQL - Система управления базами данных(СУБДД/DBMS)"""
"""Это ряд программ и инструметов позволяющих создавать базу данными,
 упрвлять ею и манипулировать данными внутри(CRUD)"""
"""Postgres - сама базы данных,она объектно реляционная , то есть данные хранятся в виде таблиц ,
и таблицы имеют связь между собой"""
"""SQL (Structured Query Language) - декларативный язык структурированных запросов. 
Oн применяется для создания и получения данных при помощи запросов в базу данных"""
# -------------------------------------------------------------------------------------------------------------------------------
"""команда для входа в базу данных через юзера Postgres:
sudo -u postgres psql


команда для входа в своего юзера 
psql


команда для содзания базы данных:
create database <name>;


подробная информация про таблицу:
\d


все твблицы:
\dt


подключение к базе данных
\c <name>


команда для входа
exit

-----------------------------------------------------------------------------------------------------------------------------------


WHERE:используются для фильтрации по полям.Будут выводиться только те данные 
которые соответствуют условию оператора WHERE
SELECT <row> FROM <tablename> WHERE <row> = <чему-либо>




BETWEEN:условие между:
SELECT * FROM products WHERE id BETWEEN 3 and 8




LIKE: выводит результат который соответствует введеному шаблону для строк.Чувствителен
к регистру



ILIKE: тоже самое только не зависит от регистра:
SELECT <row> FROM <tablename> WHERE <row> LIKE/ILIKE 'чему либо'




IN: WHERE <row> in (1,2,3,4,5);





Экспорт базы данных(дамп):
pg_dump -U <username> -d 'dbname' > 'file.sql';



ИМПОРТ:
psql -U <username> -d <dbname> -f <filename>;





GROUP BY: разделяет данные которые мы получаем в SELECT, при этом группируя их по опрделенному призраку.
И теперь для каждой группы можно использовать функцию.





Агрегатные функции: AVG(), COUNT(), MIN(), MAX(), SUM()



HAVING: ставит условие при помощи которого данные отбираются в группировках




LIMIT:ставит ограничение в кол-во получаемых данных





ORDER BY:Позволяет нам сортировать входящие данные по убыванию или возрастанию. ASC(по возрастани) и DESC(по убыванию)






команда для созздания таблицы:
CREATE TABLE <name>(
    <column> <type>,
)


CREATE TABLE films (
code char(5),
title varchar(100),
date date,
ganre varchar(50),
budget integer,
country varchar(50),
id serial
);


Команда для добваления данных в таблицу
INSERT INTO <name> [(columns)] VALUES (data), (data)

команда для получения данных
SELECT (columns)* FROM <table>


Команда для обновления данных
UPDATE <table> SET <column> = <new_value> WHERE <column> = <value>;


Команда для удаления данных
DELETE FROM <table> WHERE <column> = <value>;


команда для выхода
\q"""

# ------------------------------------------------------------------------------------------
"""
Типы полей в postgres
Numeric Types(числовые типы)
    a. smallint(2 bytes) -> -32767 to 32767
    b. integer(4 bytes) -> -2.147 to 2.147
    c. bigint(8 bytes) -> сколько хочешь
    d. real(4 bytes) -> число с плавающей точкой
    f. double precsion (8 bytes) -> real но только с двойной точногстью
    d. serial (4 bytes) -> integer , auto-increment
Character types(Символьные типы(строковые)):
    a. varchar(количество символов) -> если мы укажем 50 символов,
а заполним только 10,ьо остальные будут свободные   max 255
    b. char (количество символов) -> если мы укажем 50 символов,
а заполним только 10,то остальные будут не свободные . max 255
    c. text -> неограниченное количество символов
Boolean Type
    a. boolean (1 byte) -> True/False
date -> календарная дата
location -> координатная точка (x,y) - (245,-12)
enumurate types:
    ('a','b','c')
    CREATE TYPE <ANY NAME> as ENUM ('Happy','Sad','Mad')
"""
#------------------------------------------------------------------------------------
#Связи между таблицами(relations) :
#         1.Один к одному (One to one) - человек и паспорт.В одну таблику добавляется поле fk и дается ограничение unique
#         2.Один ко многим (One to many) - челоыек и банковские карты.В таблицу с банковскими картами добавляется поле fk
#         3.Много ко многим(Many to many) - студенты и преподвы создается вспомогательная третяя таблица со связями
# Ограничения:
#         1.NO NULL - обязательно к заполнению
#         2.unique - будут храниться только уникальные данные
#         3.CHECK - CHECK age > 0- ограничение проверки на условие
#         4.PRIMARY KEY(для установки идентификатора данных в таблице)
#         5.FOREIGN KEY(для установки связей между таблицами)
#         6.ON DELETE - для установки поведения при удалении данных которые были свзяаны
#----------------------------------------------------------------------------------------------
#JOIN: выборка данных из двух таблиц, соединение таблиц


# LEFT JOIN: выборка будет содержать все строки из левой таблицы


# RIGHT JOIN:  выборка будет содержать все строки из правой таблицы
#SELECT p1.title, p1.price,o1.quantity,p1.price * o1.quantity as total_sum FROM products p1 JOIN orders o1 ON p1.id = o1.product_id
